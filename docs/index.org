#+TITLE: Copris: Constraint Programming in Scala
#+AUTHOR: Naoyuki Tamura
#+EMAIL: 
#+STARTUP: overview hidestars nologdone
#+LANGUAGE: en
#+DESCRIPTION: Copris provides a constraint programming DSL embedded in Scala language.
#+KEYWORDS: Constraint programming, Scala, Copris, Sugar, SAT-based constraint solver
#+OPTIONS: toc:t H:3 num:nil author:t creator:t todo:nil pri:nil tags:nil LaTeX:t ^:t @:t
#+STYLE: <link rel="stylesheet" type="text/css" href="/include/org-common.css">
#+STYLE: <link rel="stylesheet" type="text/css" href="/include/org-toc-right.css">
# #+INFOJS_OPT: view:showall toc:t tdepth:2 ltoc:nil mouse:#ffffcc path:/include/org-info.js
#+MATHJAX: align:"left" mathml:nil path:"/include/mathjax/MathJax.js"
# #+INCLUDE: menu.txt
* Overview
  Copris provides a [[http://en.wikipedia.org/wiki/Constraint_programming][constraint programming]] DSL (Domain-Specific Language)
  embedded in [[http://www.scala-lang.org][Scala language]].

  The following is an example program using Copris.
#+BEGIN_SRC scala -n
import jp.kobe_u.copris._
import jp.kobe_u.copris.dsl._

object FirstStep {
  def main(args: Array[String]) = {
    val x = int('x, 0, 7)
    val y = int('y, 0, 7)
    add(x + y === 7)
    add(x * 2 + y * 4 === 20)
    if (find) {
      println(solution)
    }
  }
}
#+END_SRC scala
  - The sixth line declares a CSP variable x \in {0,1,2,...,7}, and
    assigns it to the Scala variable x.
  - The seventh line declares a CSP variable y \in {0,1,2,...,7}, and
    assigns it to the Scala variable y.
  - The eighth line adds a CSP constraint x + y = 7.
  - The ninth line adds a CSP constraint 2x + 4y = 20.
  - The tenth line finds a first solution, and the next line
    displays the solution as follows.
    : Solution(Map(x -> 4, y -> 3),Map())

* Requirements
  - [[http://java.sun.com/j2se/desktopjava/jre/][Java JRE]]:
    Java JRE 6 or higher
  - [[http://www.scala-lang.org][Scala]]:
    Scala version 2.9 or higher
  - [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]]:
    Copris uses Sugar (A SAT-based Constraint Solver) version 1.15 or higher
    as a default constraint solver. It is included in Copris package.
  - SAT solver:
    Sugar is a SAT-based Constraint solver, therefore it requires a SAT solver
    to be installed.
    Please install at least one of the followings.
    - [[http://www.sat4j.org][Sat4j]] core (Java based)
    - [[http://minisat.se][MiniSat]]
    - [[http://fmv.jku.at/precosat/][PrecoSAT]]
    - [[http://www.lri.fr/~simon/glucose/][glucose]]
    - [[https://sites.google.com/a/nabelab.org/glueminisat/][GlueMiniSat]]
    - Any other SAT solver participated to [[http://www.satcompetition.org][SAT competitions]]

  Here are some remarks how to choose SAT solver.
  - We recommend to use SAT solvers which have a good performance on
    the Application category in SAT competitions.
  - Sat4j is a Java-based SAT solver,
    therefore it is called from Copris through Java API, and
    there are no overheads of process invocation.
    However it maybe two or three times slower than other SAT solvers.
  - SAT solvers other than Sat4j is invoked as an external process
    from Copris, and therefore there are some overheads of external
    process invocation.
    However they are usually much faster, and suitable to solver difficult problems.

* Downloads
  - [[file:copris-v1-0-0.zip][copris-v1-0-0.zip]] (version 1.0.0, released <2011-08-28 Sun>)

* How to use Copris
  1. Download Copris package
     : $ wget http://bach.istc.kobe-u.ac.jp/copris/copris-v1-0-0.zip
  2. Unzip Copris package
     : $ unzip copris-v1-0-0.zip
  3. Download Sat4j core package from [[http://www.sat4j.org][Sat4j]] web page
  4. Unzip Sat4j core package
     : $ unzip sat4j-core-v20110329.zip
  5. Copy Sat4j core jar file to Copris library directory
     : $ cp org.sat4j.core.jar copris-v1-0-0/lib
  6. Move to Copris examples directory
     : $ cd copris-v1-0-0/examples
  7. Compile Examples.scala
     : $ ./coprisc Examples.scala
     The ~coprisc~ command just invokes Scala compiler with class path setting.
     You can directly compile the program as follows.
     : $ scalac -cp ../lib/copris-v1-0-0.jar:../lib/sugar-v1-15-0.jar:../lib/org.sat4j.core.jar -d classes Examples.scala
  8. Run the program
     : $ ./copris FirstStep
     The ~copris~ command just invokes Scala with class path setting.
     You can directly run the program as follows.
     : $ scala -cp classes:../lib/copris-v1-0-0.jar:../lib/sugar-v1-15-0.jar:../lib/org.sat4j.core.jar FirstStep
  
* Documents
  - [[file:copris-v1-0-0/docs/api/index.html][Copris API]] (version 1.0.0)
  - Naoyuki Tamura, Tomoya Tanjo, and Mutsunori Banbara: 
    "A SAT-based constraint solver Sugar and its Scala interface"
    (in Japanese, [[http://bach.istc.kobe-u.ac.jp/papers/pdf/jssst11.pdf][PDF]])
  - [[http://bach.istc.kobe-u.ac.jp/papers/tamura.html?q=@en+@sugar][Papers/presentations on Sugar]]

* License
  This software is distributed under [[http://www.opensource.org/licenses/bsd-license.php][the BSD Lincense]].

* Links
  - [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar: A SAT-based Constraint Solver]]
  - [[http://bach.istc.kobe-u.ac.jp/cream/][Cream: Class Library for Constraint Programming in Java]]

\par
#+BEGIN_HTML
<div class="counter" style="text-align: right">
<img src="http://bach.istc.kobe-u.ac.jp/cgi-bin/Count.cgi?dd=D&df=copris.dat&tr=Y&ft=0&srgb=00ff00&prgb=000060" alt="?????" align=absmiddle>
</div>
#+END_HTML
* COMMENT   
# Local Variables:
# system-time-locale: "C"
# End:
